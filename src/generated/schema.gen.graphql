### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  """Util Payload"""
  token: String!
  user: User!
}

type Mutation {
  createUser(email: String, name: String): User!
  createUserPhone(description: String, number: String): Phone!
  createUserWithPhone(description: String!, email: String, name: String!, number: String, password: String, role: String): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String): AuthPayload!
  signup(description: String, email: String, name: String!, number: String, password: String, role: String): AuthPayload!
}

enum OrderByArg {
  asc
  desc
}

type Phone {
  description: String!
  id: String!
  number: String!
  owner: User!
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  description: StringFilter
  id: StringFilter
  NOT: [PhoneWhereInput!]
  number: StringFilter
  OR: [PhoneWhereInput!]
  owner: UserWhereInput
  userId: StringFilter
}

type Query {
  getPhone(number: String!): Phone!
  phones(skip: Int): [Phone!]!
  usersList(orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  USER
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: String!
  name: String!
  phone: Phone
  role: Role!
}

input UserOrderByInput {
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  password: OrderByArg
  role: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  phone: PhoneWhereInput
  role: Role
}

input UserWhereUniqueInput {
  email: String
  id: String
}

### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createUser(email: String, name: String): User!
  createUserPhone(description: String, number: String): Phone!
  createUserWithPhone(description: String, email: String, name: String!, number: String, role: String): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Phone {
  description: String!
  id: Int!
  number: String
  owner: User
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  description: StringFilter
  id: IntFilter
  NOT: [PhoneWhereInput!]
  number: NullableStringFilter
  OR: [PhoneWhereInput!]
  owner: UserWhereInput
  userId: NullableIntFilter
}

type Post {
  author: User
  content: String
  id: Int!
  published: Boolean!
  title: String!
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  content: NullableStringFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
}

type Query {
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  phones(skip: Int): [Phone!]!
  usersList(orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  USER
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  name: String
  phone: Phone!
  posts: [Post!]!
  role: Role!
}

input UserOrderByInput {
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  role: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  phone: PhoneWhereInput
  posts: PostFilter
  role: Role
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
